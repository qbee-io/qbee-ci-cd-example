# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
    tags:
      - '*'
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          
      # Resolve package details
      - name: Resolve package details
        id: resolve-package-details
        run: |
          # Version for non-tag pushes
          PKG_VERSION=$(git log -n 1 --date=format:%Y%m%d --pretty=0.0.0~git%cd.%h)
          if [[ ${{ github.ref_type }} == "tag" ]]; then
            PKG_VERSION=$(git describe --abbrev=0 --tags)
          fi
          PKG_NAME=$(basename ${{ github.repository }})
          PKG_ARCH=$(dpkg --print-architecture)
          
          echo "::set-output name=PKG_VERSION::$PKG_VERSION"
          echo "::set-output name=PKG_NAME::$PKG_NAME"
          echo "::set-output name=PKG_ARCH::$PKG_ARCH"
          echo "::set-output name=PKG_FILENAME::$PKG_NAME_$PKG_VERSION_$PKG_ARCH.deb"
          
#      - name: git command test
#        id: github-env-setup
#        run: |
#          echo ${{ github.ref_name }}
#          echo ${{ github.ref }}
#          echo "::set-output name=PROG_NAME::$(basename ${{ github.repository }})"
#          PROG_VERSION=$(git describe --tags --abbrev=0 2>/dev/null || true)
#          if [[ -z $PROG_VERSION ]]; then
#            PROG_VERSION="0.0.0~$(git rev-parse --short HEAD)"
#          fi
#          echo "::set-output name=PROG_VERSION::$PROG_VERSION"
#          PKG_BUILD_DIR=build
#          mkdir -p $PKG_BUILD_DIR
#          echo "::set-output name=PKG_BUILD_DIR::$PKG_BUILD_DIR"
#          echo ${{ github.sha }} | cut -c -7

# git describe --tags --abbrev=0 2>/dev/null
# git rev-parse --show-toplevel
# git rev-parse --short HEAD

#      - name: get env setup
#        run: |
#          echo "prog name is: ${{ steps.github-env-setup.outputs.PROG_NAME }}"
#          echo "prog version is: ${{ steps.github-env-setup.outputs.PROG_VERSION }}"
#          echo "build dir is: ${{ steps.github-env-setup.outputs.PKG_BUILD_DIR }}"

      - name: Test
        run: |
          echo ${{ steps.resolve-package-details.outputs.PKG_FILENAME }}

      # Runs a single command using the runners shell
      - name: Package
        uses: bpicode/github-action-fpm@v0.9.2
        with:
          fpm_args: "--version ${{ steps.resolve-package-details.outputs.PKG_VERSION }} --architecture ${{ steps.resolve-package-details.outputs.PKG_ARCH }}"
          fpm_opts: "-s dir -t deb -n ${{ steps.resolve-package-details.outputs.PKG_NAME }} -d python3-flask -d python3-yaml -C ./files/package etc usr"

      - name: find package
        run: |
          ls -l
          find . -iname "*.deb"

      # - name: qbee.io authentication
      #   id: qbee-auth
      #   uses: qbee-io/authenticate-action@v1
      #   with:
      #     login: ${{ secrets.QBEE_USER }}
      #     password: ${{ secrets.QBEE_PW }}

      # - name: qbee.io file upload deb package
      #   uses: qbee-io/file-upload-action@v1.2
      #   with:
      #     token: ${{ steps.qbee-auth.outputs.token }}
      #     filename: ${{ ${{ steps.resolve-package-details.outputs.PKG_VERSION }} --architecture ${{ steps.resolve-package-details.outputs.PKG_ARCH }}
      #     qbee_directory: '/'
      #     local_directory: '.'

      # - name: qbee.io software management
      #   uses: qbee-io/software-management-action@v0.3
      #   with:
      #     token: ${{ steps.qbee-auth.outputs.token }}
      #     config_file: 'qbee/software_management.json'
      #     mode: 'if_not_present'
      #     device_or_group_id: ${{ secrets.QBEE_DEVICE_ID }}
      #     commit_message: 'uploading content from GitHub'
